{"ast":null,"code":"var _jsxFileName = \"/Users/arnavsaharan/Desktop/projects/addressbook-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport ContactService from './services/ContactService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [contactToEdit, setContactToEdit] = useState(null);\n  const handleAddOrUpdateContact = async contactData => {\n    try {\n      if (contactData.id) {\n        // Update existing contact\n        await ContactService.updateContact(contactData.id, contactData);\n        alert('Contact updated successfully!');\n      } else {\n        // Add new contact\n        await ContactService.addContact(contactData);\n        alert('Contact added successfully!');\n      }\n      // Refresh the contact list by triggering a re-render\n      window.location.reload(); // Simple way to refresh ContactList\n    } catch (error) {\n      var _error$response;\n      console.error('Error saving contact:', error);\n      alert('Failed to save contact: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message));\n    }\n  };\n  const handleEdit = contact => {\n    setContactToEdit(contact);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ContactForm, {\n      contactToEdit: contactToEdit,\n      onSubmit: handleAddOrUpdateContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n      contactToEdit: contactToEdit,\n      onEdit: handleEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"CLaj87XZCfAoa9mZgv8/3K0SOLg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ContactForm","ContactList","ContactService","jsxDEV","_jsxDEV","App","_s","contactToEdit","setContactToEdit","handleAddOrUpdateContact","contactData","id","updateContact","alert","addContact","window","location","reload","error","_error$response","console","response","data","message","handleEdit","contact","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","onEdit","_c","$RefreshReg$"],"sources":["/Users/arnavsaharan/Desktop/projects/addressbook-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport ContactService from './services/ContactService';\n\nfunction App() {\n    const [contactToEdit, setContactToEdit] = useState(null);\n\n    const handleAddOrUpdateContact = async (contactData) => {\n        try {\n            if (contactData.id) {\n                // Update existing contact\n                await ContactService.updateContact(contactData.id, contactData);\n                alert('Contact updated successfully!');\n            } else {\n                // Add new contact\n                await ContactService.addContact(contactData);\n                alert('Contact added successfully!');\n            }\n            // Refresh the contact list by triggering a re-render\n            window.location.reload(); // Simple way to refresh ContactList\n        } catch (error) {\n            console.error('Error saving contact:', error);\n            alert('Failed to save contact: ' + (error.response?.data || error.message));\n        }\n    };\n\n    const handleEdit = (contact) => {\n        setContactToEdit(contact);\n    };\n\n    return (\n        <div>\n            <ContactForm\n                contactToEdit={contactToEdit}\n                onSubmit={handleAddOrUpdateContact}\n            />\n            <ContactList\n                contactToEdit={contactToEdit}\n                onEdit={handleEdit}\n            />\n        </div>\n    );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,cAAc,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMU,wBAAwB,GAAG,MAAOC,WAAW,IAAK;IACpD,IAAI;MACA,IAAIA,WAAW,CAACC,EAAE,EAAE;QAChB;QACA,MAAMT,cAAc,CAACU,aAAa,CAACF,WAAW,CAACC,EAAE,EAAED,WAAW,CAAC;QAC/DG,KAAK,CAAC,+BAA+B,CAAC;MAC1C,CAAC,MAAM;QACH;QACA,MAAMX,cAAc,CAACY,UAAU,CAACJ,WAAW,CAAC;QAC5CG,KAAK,CAAC,6BAA6B,CAAC;MACxC;MACA;MACAE,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA;MACZC,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CL,KAAK,CAAC,0BAA0B,IAAI,EAAAM,eAAA,GAAAD,KAAK,CAACG,QAAQ,cAAAF,eAAA,uBAAdA,eAAA,CAAgBG,IAAI,KAAIJ,KAAK,CAACK,OAAO,CAAC,CAAC;IAC/E;EACJ,CAAC;EAED,MAAMC,UAAU,GAAIC,OAAO,IAAK;IAC5BjB,gBAAgB,CAACiB,OAAO,CAAC;EAC7B,CAAC;EAED,oBACIrB,OAAA;IAAAsB,QAAA,gBACItB,OAAA,CAACJ,WAAW;MACRO,aAAa,EAAEA,aAAc;MAC7BoB,QAAQ,EAAElB;IAAyB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eACF3B,OAAA,CAACH,WAAW;MACRM,aAAa,EAAEA,aAAc;MAC7ByB,MAAM,EAAER;IAAW;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACzB,EAAA,CAtCQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}